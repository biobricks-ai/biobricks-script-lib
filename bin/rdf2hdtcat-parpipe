#!/bin/bash

set -euo pipefail;

export LC_ALL=C

RDF2HDTCAT_PARALLEL_OPTS_DEFAULT='-j4 --block-size 500M'
RDF2HDTCAT_RDF2HDT_OPTS_DEFAULT='-p'
RDF2HDTCAT_JAVA_OPTIONS_DEFAULT='-Xmx6g'
RDF2HDTCAT_HDTCAT_OPTIONS_DEFAULT=''

if [ "$#" -ne 1 ] || [ -z "$1" ]; then
	cat <<EOF >&2
# NAME

  rdf2hdtcat-parpipe - parallel processing of RDF N-Triples to HDT

# SYNOPSIS

  rdf2hdtcat-parpipe output.hdt < rdf.nt

# DESCRIPTION

Takes RDF N-Triples input on STDIN and outputs an RDF HDT file generated by
splitting the input into partitions and then merging them.

# ENVIRONMENT

  * TMPDIR:

    Used for temporary files. See mktemp(1).

  * RDF2HDTCAT_PARALLEL_OPTS:

    Passed to parallel(1).

    Default: '$RDF2HDTCAT_PARALLEL_OPTS_DEFAULT'

  * RDF2HDTCAT_RDF2HDT_OPTS:

    Passed to rdf2hdt.

    Default: '$RDF2HDTCAT_RDF2HDT_OPTS_DEFAULT'

  * RDF2HDTCAT_JAVA_OPTIONS:

    Passed to java(1).

    Default: '$RDF2HDTCAT_JAVA_OPTIONS_DEFAULT'

  * RDF2HDTCAT_HDTCAT_OPTIONS:

    Passed to hdtCat.sh.

    Default: '$RDF2HDTCAT_HDTCAT_OPTIONS_DEFAULT'

EOF
	exit 1
fi

RDF_HDT_FINAL="$1"

export RDF2HDTCAT_PARALLEL_OPTS=${RDF2HDTCAT_PARALLEL_OPTS:-$RDF2HDTCAT_PARALLEL_OPTS_DEFAULT}
export RDF2HDTCAT_RDF2HDT_OPTS=${RDF2HDTCAT_RDF2HDT_OPTS:-$RDF2HDTCAT_RDF2HDT_OPTS_DEFAULT}

export RDF2HDTCAT_JAVA_OPTIONS=${RDF2HDTCAT_JAVA_OPTIONS:-$RDF2HDTCAT_JAVA_OPTIONS_DEFAULT}
export RDF2HDTCAT_HDTCAT_OPTIONS=${RDF2HDTCAT_HDTCAT_OPTIONS:-$RDF2HDTCAT_HDTCAT_OPTIONS_DEFAULT}

## Partition the data on `STDIN` into blocks that each get processed with
## `rdf2hdt`.
##
## NOTE: using `parallel` with `--cat` for temporary file (as opposed to
## `--fifo`) because `rdf2hdt` from `hdt-cpp` does not work on `STDIN` directly
## (due to not having one-pass processing).
## See <https://github.com/rdfhdt/hdt-cpp/issues/233#issuecomment-1054008231>.
PART_LIST=$(mktemp --suffix=.rdf2hdtcat-part.lst)
parallel $RDF2HDTCAT_PARALLEL_OPTS --pipe --cat --keep-order '
	PART_TEMP=$(mktemp -d) \
		&& rdf2hdt $RDF2HDTCAT_RDF2HDT_OPTS -f ntriples {} $PART_TEMP/part_{#}.hdt \
		&& echo $PART_TEMP/part_{#}.hdt' > $PART_LIST;

if [ -s $PART_LIST ]; then
	if [ "$(wc -l < $PART_LIST)" -gt 1 ]; then
		## Merge the partitioned .hdt files together.
		##
		## NOTE: Using cat below does not take into account limits of argument count / length.
		JAVA_OPTIONS=$RDF2HDTCAT_JAVA_OPTIONS \
			hdtCat.sh $RDF2HDTCAT_HDTCAT_OPTIONS $(cat $PART_LIST) $RDF_HDT_FINAL
	else
		## Single file
		mv -v $(cat $PART_LIST) $RDF_HDT_FINAL
	fi
else
	echo "$0: Empty partitions of RDF input: possibly missing N-Triples input on STDIN?" >&2
	rm $PART_LIST
	exit 1
fi

## Remove temporary files and directories.
< $PART_LIST parallel 'rm {} && rmdir {//}'
rm $PART_LIST
